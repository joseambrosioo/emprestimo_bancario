import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.figure_factory as ff
from dash import Dash, dcc, html, Input, Output
import dash_bootstrap_components as dbc
from sklearn import metrics
from sklearn import ensemble, tree, linear_model, svm
from sklearn.metrics import classification_report, f1_score, confusion_matrix
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import dash_table
import joblib

# Importa a nova classe de treinamento de modelo
from model_trainer import LoanModelTrainer

# --- Carregamento de Dados e Treinamento do Modelo ---
# Instancia e executa a classe de treinamento
trainer = LoanModelTrainer(
    "dataset/card.asc", "dataset/account.asc", "dataset/disp.asc", 
    "dataset/client.asc", "dataset/district.asc", "dataset/order.asc", 
    "dataset/loan.asc", "dataset/trans.asc"
)
(trained_models, X_train, X_test, y_train, y_test, sc, X_orig, X_scaled_test, df, df_for_plotting) = trainer.train_and_save_models()


# Prepara as colunas para o dash_table.DataTable
columns_with_types = [{"name": i, "id": i, "type": "numeric" if pd.api.types.is_numeric_dtype(df[i]) else "text"} for i in df.columns]

# --- Configura√ß√£o do Dashboard ---
app = Dash(__name__, external_stylesheets=[dbc.themes.FLATLY])
app.title = "Previs√£o de Incumprimento de Empr√©stimos Banc√°rios"
server = app.server

header = dbc.Navbar(
    dbc.Container(
        [
            html.Div(
                [
                    html.Span("üí∞", className="me-2"),
                    dbc.NavbarBrand("Previs√£o de Incumprimento de Empr√©stimos Banc√°rios", class_name="fw-bold text-wrap", style={"color": "black"}),
                ], className="d-flex align-items-center"
            ),
            dbc.Badge("Dashboard", color="primary", className="ms-auto")
        ]
    ),
    color="light",
    class_name="shadow-sm mb-3"
)

# --- 1. Aba ASK (PERGUNTAR) ---
ask_tab = dcc.Markdown(
    """
    ### ‚ùì **PERGUNTAR** ‚Äî A Pergunta de Neg√≥cio
    Esta se√ß√£o define o problema central do neg√≥cio.

    **Tarefa de Neg√≥cio**: Como banco, queremos prever quais solicitantes de empr√©stimo t√™m alto risco de **incumprimento** (n√£o conseguir pagar o empr√©stimo). Ao identificar clientes "bons" versus "ruins", podemos melhorar nosso processo de aprova√ß√£o de empr√©stimos, gerenciar o risco de forma mais eficaz e oferecer suporte proativo para evitar inadimpl√™ncias.

    **Partes Interessadas**: Os principais usu√°rios desta an√°lise s√£o **Gerentes de Banco**, **Analistas de Risco** e equipes de **Atendimento ao Cliente**. Eles precisam de uma maneira clara e acion√°vel de entender quem tem maior probabilidade de incumprimento e por qu√™.

    **Entreg√°veis**: O produto final √© este painel interativo, que fornece uma vis√£o abrangente de nossa an√°lise, desde a prepara√ß√£o dos dados at√© o desempenho do modelo e as recomenda√ß√µes finais.
    """, className="p-4"
)

# --- 2. Aba PREPARE (PREPARAR) ---
prepare_tab = html.Div(
    children=[
        html.H4(["üìù ", html.B("PREPARAR"), " ‚Äî Preparando os Dados"], className="mt-4"),
        html.P("Para construir nosso modelo preditivo, primeiro precisamos limpar e preparar um grande dataset contendo informa√ß√µes sobre nossos clientes, suas contas e empr√©stimos anteriores."),
        html.H5("Fonte e Prepara√ß√£o dos Dados"),
        html.P(
            ["Estamos trabalhando com um dataset de um banco coletado em 1999, combinando oito tabelas diferentes (cliente, conta, empr√©stimo, etc.). Mesclamos essas tabelas em um √∫nico dataset mestre e criamos novos recursos, como `anos_de_emprestimo` e `saldo_medio_antes_do_emprestimo`. O objetivo desse processo √© criar uma √∫nica tabela limpa da qual nossos modelos possam aprender."]
        ),
        dbc.Row(
            [
                dbc.Col(
                    dbc.Card(
                        [
                            dbc.CardHeader("Dataset Final Mesclado"),
                            dbc.CardBody(
                                [
                                    html.P(f"Linhas: {df.shape[0]}"),
                                    html.P(f"Recursos: {df.shape[1]}"),
                                ]
                            ),
                        ], className="mb-3"
                    )
                ),
            ]
        ),
        html.H5("Recursos Chave e Seus Significados"),
        dbc.Table.from_dataframe(
            pd.DataFrame({
                "Recurso": ["avg_balance_3M_before_loan", "min_balance_before_loan", "times_balance_below_5K", "age", "years_card_issued", "amount"],
                "Descri√ß√£o": [
                    "Saldo m√©dio da conta nos 3 meses que antecederam a solicita√ß√£o do empr√©stimo.",
                    "O saldo mais baixo registrado na conta antes da aprova√ß√£o do empr√©stimo. Um n√∫mero muito baixo aqui pode ser um sinal de alerta. üö©",
                    "O n√∫mero de vezes que o saldo da conta caiu abaixo de 5.000. Um n√∫mero maior sugere instabilidade financeira.",
                    "A idade do cliente.",
                    "O n√∫mero de anos em que o cliente teve um cart√£o de cr√©dito com o banco.",
                    "O valor do empr√©stimo concedido."
                ]
            }),
            striped=True, bordered=True, hover=True
        ),
        html.H5("Amostra do Dataset (Primeiras 10 Linhas)"),
        dash_table.DataTable(
            id='sample-table',
            columns=columns_with_types,
            data=df.head(10).to_dict('records'),
            sort_action="native",
            filter_action="native",
            page_action="none",
            style_table={'overflowX': 'auto', 'width': '100%'},
            style_header={
                'backgroundColor': 'rgb(230, 230, 230)',
                'fontWeight': 'bold',
                'textAlign': 'center',
            },
            style_cell={
                'textAlign': 'left',
                'padding': '5px',
                'font-size': '12px',
                'minWidth': '80px', 'width': 'auto', 'maxWidth': '150px',
                'overflow': 'hidden',
                'textOverflow': 'ellipsis',
            },
        ),
    ], className="p-4"
)

# --- 3. Aba ANALYZ (ANALISAR) ---
analyze_tab = html.Div(
    children=[
        html.H4(["üìà ", html.B("ANALISAR"), " ‚Äî Encontrando Padr√µes e Construindo Modelos"], className="mt-4"),
        html.P(
            ["A aba Analisar √© onde transformamos nossos dados preparados em insights acion√°veis e avaliamos a efic√°cia de nossos modelos de aprendizado de m√°quina. Ela √© dividida em duas sub-abas principais: ", html.B("An√°lise Explorat√≥ria de Dados (AED)"), " e ", html.B("Desempenho do Modelo"), "."]
        ),
        dbc.Tabs([
            dbc.Tab(label="An√°lise Explorat√≥ria de Dados", children=[
                html.Div(
                    children=[
                        html.P(
                            ["A se√ß√£o de AED nos ajuda a entender as principais caracter√≠sticas de nossos dados antes de come√ßar a modelagem. √â como verificar os ingredientes antes de cozinhar."]
                        ),
                        html.H5("Distribui√ß√£o de Incumprimento", className="mt-4"),
                        html.P(
                            ["O gr√°fico de pizza abaixo mostra que nossos dados est√£o ", html.B("desequilibrados"), 
"‚Äîuma pequena porcentagem de clientes de fato inadimpliu. Isso √© comum em dados banc√°rios e √© por isso que uma alta pontua√ß√£o de precis√£o por si s√≥ pode ser enganosa. Um modelo que prev√™ que ningu√©m ir√° inadimplir ainda seria ~90% preciso, mas seria in√∫til para identificar clientes em risco. N√£o estamos apenas olhando para as porcentagens; estamos vendo um problema de neg√≥cio cr√≠tico: ", html.B("desequil√≠brio de classes"), 
". A fatia grande para 'Sem Incumprimento' (status 0) e a fatia min√∫scula para 'Incumprimento' (status 1) significa que um modelo pode alcan√ßar alta precis√£o simplesmente prevendo 'Sem Incumprimento' o tempo todo. √â por isso que n√£o podemos confiar apenas na precis√£o e precisamos de m√©tricas mais robustas, que encontraremos na se√ß√£o 'Desempenho do Modelo'."]
                        ),
                        dcc.Graph(
                            id="status-pie-chart",
                            figure=go.Figure(
                                data=[go.Pie(labels=df_for_plotting["status"].value_counts().keys().tolist(),
                                             values=df_for_plotting["status"].value_counts().values.tolist(),
                                             marker=dict(colors=['#1f77b4', '#ff7f0e'], line=dict(color="white", width=1.3)),
                                             hoverinfo="label+percent", hole=0.5)],
                                layout=go.Layout(title="Distribui√ß√£o de Incumprimento de Empr√©stimos (0=Sem Incumprimento, 1=Incumprimento)", height=400, margin=dict(t=50, b=50))
                            )
                        ),
                        html.H5("Taxa de Incumprimento por Faixa Et√°ria", className="mt-4"),
                        html.P(
                            ["Este gr√°fico de barras empilhadas mostra a porcentagem de inadimplentes e n√£o inadimplentes em diferentes faixas et√°rias. Ele nos ajuda a ver se certas faixas et√°rias s√£o mais propensas √† incumprimento. A visualiza√ß√£o revela que, embora o n√∫mero total de empr√©stimos varie por idade, a porcentagem de inadimpl√™ncias dentro de cada grupo √© relativamente semelhante. Ao empilhar as barras para 'Sem Incumprimento' e 'Incumprimento', podemos ver a propor√ß√£o de cada resultado dentro de cada faixa et√°ria. Estamos procurando por diferen√ßas significativas na taxa de incumprimento entre as faixas et√°rias. Com base nos dados, a ", html.B("faixa et√°ria de 45-50 anos √© a mais propensa √† incumprimento"), ", com uma porcentagem ligeiramente maior de inadimpl√™ncias em compara√ß√£o com outros grupos de idade."]
                        ),
                        dcc.Graph(
                            id="age-default-plot",
                            figure=go.Figure(
                                data=[go.Bar(
                                    x=df_for_plotting.groupby('age_bin')['status'].value_counts(normalize=True).unstack()[0].index,
                                    y=df_for_plotting.groupby('age_bin')['status'].value_counts(normalize=True).unstack()[0].values,
                                    name='Sem Incumprimento',
                                    marker_color='#1f77b4'
                                ), go.Bar(
                                    x=df_for_plotting.groupby('age_bin')['status'].value_counts(normalize=True).unstack()[1].index,
                                    y=df_for_plotting.groupby('age_bin')['status'].value_counts(normalize=True).unstack()[1].values,
                                    name='Incumprimento',
                                    marker_color='#ff7f0e'
                                )],
                                layout=go.Layout(
                                    barmode='stack',
                                    title="Porcentagem de Incumprimento por Faixa Et√°ria",
                                    yaxis_title="Porcentagem",
                                    xaxis_title="Faixa Et√°ria",
                                    height=450, margin=dict(t=50, b=50)
                                )
                            )
                        ),
                        html.H5("A Import√¢ncia de Dados Espec√≠ficos de Transa√ß√µes", className="mt-4"),
                        html.P(
                            ["Nossa an√°lise destaca o valor de focar em ", html.B("dados espec√≠ficos e granulares"), ". Neste projeto, criamos recursos detalhados a partir de dados brutos de transa√ß√µes, como `avg_balance_before_loan` e `times_balance_below_5K`. Estes s√£o muito mais informativos do que um simples valor total de transa√ß√£o do cliente, pois capturam comportamentos espec√≠ficos ‚Äî como saques a descoberto frequentes ou saldos baixos ‚Äî que s√£o fortes indicadores de estabilidade financeira e da probabilidade de incumprimento. Uma m√©trica 'total' simples esconderia esses sinais de risco cruciais, dificultando a previs√£o precisa do risco do cliente."]
                        ),
                    ], className="p-4"
                )
            ]),
            dbc.Tab(label="Desempenho do Modelo", children=[
                html.Div(
                    children=[
                        html.P(
                            ["Esta se√ß√£o √© sobre como avaliar nossos modelos para escolher o melhor para a tarefa. N√£o estamos apenas procurando uma 'pontua√ß√£o alta', mas sim um modelo que seja genuinamente bom em detectar clientes de alto risco."]
                        ),
                        html.H5("M√©tricas de Desempenho do Modelo", className="mt-4"),
                        html.P(
                            ["Para realmente avaliar nossos modelos, nos concentramos em v√°rias m√©tricas-chave al√©m da simples precis√£o:",
                             html.Ul([
                                 html.Li([html.B("Precis√£o (Precision):"), " Pense na Precis√£o como o custo de um alarme falso. Se nosso modelo tem alta precis√£o, as pessoas que ele sinaliza para acompanhamento s√£o muito provavelmente inadimplentes reais. Dos clientes que previmos que inadimpliriam, quantos realmente o fizeram? Alta precis√£o √© boa para evitar alarmes falsos."]),
                                 html.Li([html.B("Recall:"), " Pense no Recall como o custo de um aviso perdido. Se nosso modelo tem alto recall, ele √© muito bom em encontrar a maioria das pessoas que ir√£o inadimplir, para que n√£o percamos um cliente de alto risco. De todos os clientes que inadimpliram, quantos nosso modelo identificou com sucesso? O alto recall √© crucial para um banco pegar o m√°ximo de clientes em risco poss√≠vel."]),
                                 html.Li([html.B("F1-Score:"), " Um equil√≠brio entre precis√£o e recall, fornecendo uma √∫nica m√©trica para comparar modelos. Esta √© a m√©dia harm√¥nica da precis√£o e do recall. √â um √∫nico n√∫mero que nos ajuda a comparar modelos quando a precis√£o e o recall s√£o importantes."]),
                                 html.Li([html.B("ROC-AUC:"), " Esta √© uma m√©trica de resumo poderosa. Ela mede a capacidade do modelo de distinguir entre as duas classes (inadimplentes vs. n√£o inadimplentes). Uma pontua√ß√£o mais pr√≥xima de 1.0 √© melhor."])
                             ])
                            ]
                        ),
                        html.P([
                            "Os modelos ", html.B("Random Forest"), ", ", html.B("Decision Tree"), ", ",
                            html.B("Gradient Boosting"), " e ", html.B("SVM"), 
                            " demonstram um desempenho perfeito na identifica√ß√£o de inadimplentes. ",
                            "Cada um alcan√ßou ", html.B("100% de Precis√£o, Recall, F1-Score e Acur√°cia"),
                            ", juntamente com um ", html.B("AUC de 1.00"), 
                            ". Isso significa que eles classificaram tanto os inadimplentes quanto os n√£o inadimplentes sem um √∫nico erro, ",
                            "evitando quaisquer clientes de alto risco perdidos e garantindo resultados de neg√≥cio confi√°veis. O modelo de ", html.B("Regress√£o Log√≠stica"), " tamb√©m teve um forte desempenho, com uma ",
                            html.B("Acur√°cia de 99%"), " e um ", html.B("AUC de 1.00"),
                            ". No entanto, ele perdeu ", html.B("2 inadimplentes reais"), " (", html.B("Recall = 0.91"), 
                            "), o que reduziu seu ", html.B("F1-Score para inadimplentes para 0.95"),
                            ". Isso o torna menos confi√°vel do que os outros modelos que alcan√ßaram uma detec√ß√£o perfeita."
                        ]),

                        html.H6("Matriz de Confus√£o", className="mt-4"),
                        html.P(
                            ["A matriz de confus√£o √© uma tabela que divide as previs√µes do nosso modelo em quatro categorias:", 
                             html.Ul([
                                 html.Li([html.B("Verdadeiros Positivos (VP):"), " Inadimplentes corretamente previstos."]),
                                 html.Li([html.B("Verdadeiros Negativos (VN):"), " N√£o inadimplentes corretamente previstos."]),
                                 html.Li([html.B("Falsos Positivos (FP):"), " Inadimplentes incorretamente previstos (erro Tipo I). Estes s√£o os 'alarmes falsos'."]),
                                 html.Li([html.B("Falsos Negativos (FN):"), " N√£o inadimplentes incorretamente previstos (erro Tipo II). Estes s√£o os 'avisos perdidos' que um banco quer evitar a todo custo, pois representam uma perda financeira potencial."])
                             ])
                            ]
                        ),
                        dbc.Row([
                            dbc.Col(
                                html.Div([
                                    html.H6("Selecione um Modelo:"),
                                    dcc.Dropdown(
                                        id="model-dropdown",
                                        options=[{'label': name, 'value': name} for name in trained_models.keys()],
                                        value='Random Forest',
                                        clearable=False,
                                    ),
                                    dcc.Graph(id="confusion-matrix-plot"),
                                ]), md=6
                            ),
                            dbc.Col(
                                html.Div([
                                    html.H6("Relat√≥rio de Desempenho do Modelo:"),
                                    html.Pre(id="classification-report-text"),
                                ]), md=6
                            ),
                        ]),
                        html.Hr(),
                        html.H5("Import√¢ncia dos Recursos", className="mt-4"),
                        html.P(
                            ["Este gr√°fico de barras nos mostra em quais recursos o modelo selecionado mais se baseou para fazer suas previs√µes. Estamos vendo o 'processo de pensamento' do modelo. Quanto maior a barra, mais influente foi esse recurso. Neste caso, os dois recursos mais importantes foram ", html.B("`avg_balance_before_loan`"), " e ", html.B("`avg_amount_trans_before_loan`"), ". Este √© um insight cr√≠tico porque valida o processo de prepara√ß√£o dos dados ‚Äî nosso trabalho na engenharia de recursos valeu a pena, criando sinais significativos para o modelo."]
                        ),
                        dcc.Graph(id="feature-importance-plot"),
                        html.Hr(),
                        html.H5("Curva Caracter√≠stica de Opera√ß√£o do Receptor (ROC)", className="mt-4"),
                        html.P(id="roc-curve-description"),
                        dcc.Graph(id="roc-curve-plot"),
                    ], className="p-4"
                )
            ])
        ])
    ]
)

# --- 4. Aba ACT (AGIR) ---
act_tab = dcc.Markdown(
    """
    ### üöÄ **AGIR** ‚Äî Recomenda√ß√µes e Pr√≥ximos Passos
    Esta √© a se√ß√£o mais importante, pois traduz os insights dos dados em uma estrat√©gia de neg√≥cio.

    - **Priorizar com Dados**: Os modelos identificaram indicadores de risco chave, como o `min_balance_before_loan` e o `times_balance_below_5K` do cliente. Estes s√£o preditores poderosos de futura incumprimento. Os gerentes de banco devem usar esses insights para criar regras de avalia√ß√£o de risco mais robustas. Por exemplo, qualquer solicitante cujo saldo caia abaixo de um certo limite v√°rias vezes pode exigir uma an√°lise mais cuidadosa.

    - **Reten√ß√£o Proativa**: Em vez de esperar que os clientes inadimplam, o banco pode usar o modelo implementado para obter uma lista di√°ria de contas com alto risco. Um representante de atendimento ao cliente pode ent√£o entrar em contato proativamente com esses clientes para oferecer aconselhamento financeiro, um pequeno empr√©stimo de emerg√™ncia ou um plano de pagamento flex√≠vel, reduzindo assim o risco de uma perda.

    - **Implementar o Melhor Modelo**: O modelo **Gradient Boosting** √© nossa principal recomenda√ß√£o para implementa√ß√£o devido ao seu desempenho superior em todas as m√©tricas. Este modelo ser√° o c√©rebro por tr√°s de nossa nova estrat√©gia proativa de risco de empr√©stimos, ajudando o banco a tomar decis√µes mais inteligentes e baseadas em dados.
    """, className="p-4"
)

app.layout = dbc.Container(
    [
        header,
        dbc.Tabs(
            [
                dbc.Tab(ask_tab, label="Perguntar"),
                dbc.Tab(prepare_tab, label="Preparar"),
                dbc.Tab(analyze_tab, label="Analisar"),
                dbc.Tab(act_tab, label="Agir"),
            ]
        ),
    ],
    fluid=True,
)

# --- Callbacks ---
@app.callback(
    Output("confusion-matrix-plot", "figure"),
    Output("classification-report-text", "children"),
    Output("feature-importance-plot", "figure"),
    Output("roc-curve-plot", "figure"),
    Output("roc-curve-description", "children"),
    Input('model-dropdown', 'value')
)
def update_metrics_and_importance(selected_model):
    model = trained_models[selected_model]
    
    # Verifica se o modelo precisa de dados escalados ou n√£o
    if selected_model in ['SVM', 'Logistic Regression']:
        X_test_for_pred = X_scaled_test
    else:
        X_test_for_pred = X_test

    y_pred = model.predict(X_test_for_pred)
    
    # 1. Gr√°fico da Matriz de Confus√£o
    cm = confusion_matrix(y_test, y_pred)

    # Reordena para o layout VP-FP / FN-VN
    z_data = np.array([
        [cm[1, 1], cm[0, 1]],  # VP, FP
        [cm[1, 0], cm[0, 0]]  # FN, VN
    ])

    cm_text = np.array([
        [f'VP: {cm[1, 1]}', f'FP: {cm[0, 1]}'],
        [f'FN: {cm[1, 0]}', f'VN: {cm[0, 0]}']
    ])

    # Inverte as linhas para a exibi√ß√£o correta de cima para baixo
    z_data = np.flipud(z_data)
    cm_text = np.flipud(cm_text)

    fig_cm = ff.create_annotated_heatmap(
        z=z_data,
        x=["Previsto Incumprimento (1)", "Previsto Sem Incumprimento (0)"],
        y=["Incumprimento Real (1)", "Sem Incumprimento Real (0)"],
        annotation_text=cm_text,
        colorscale='Blues'
    )

    fig_cm.update_layout(title=f"Matriz de Confus√£o ({selected_model})", height=450, margin=dict(t=50, b=50))

    # 2. Relat√≥rio de Classifica√ß√£o
    report = classification_report(y_test, y_pred, output_dict=False, zero_division=0)
    
    # 3. Gr√°fico de Import√¢ncia dos Recursos
    fig_fi = go.Figure()
    if hasattr(model, 'feature_importances_'):
        importances = model.feature_importances_
        feature_names = X_orig.columns
        df_importance = pd.DataFrame({'feature': feature_names, 'importance': importances}).sort_values(by='importance', ascending=False)
        fig_fi.add_trace(go.Bar(
            x=df_importance['importance'],
            y=df_importance['feature'],
            orientation='h'
        ))
        fig_fi.update_layout(
            title=f"Import√¢ncia dos Recursos para {selected_model}",
            xaxis_title="Import√¢ncia",
            yaxis_title="Recurso",
            height=500,
            margin=dict(l=150, t=50, b=50)
        )
    else:
        fig_fi.update_layout(title=f"Import√¢ncia dos Recursos n√£o Dispon√≠vel para {selected_model}")
        
    # 4. Novo Gr√°fico e Descri√ß√£o da Curva ROC
    fig_roc = go.Figure()
    roc_description_list = []
    if hasattr(model, 'predict_proba'):
        y_pred_proba = model.predict_proba(X_test_for_pred)[:, 1]
        fpr, tpr, _ = metrics.roc_curve(y_test, y_pred_proba)
        roc_auc = metrics.auc(fpr, tpr)
        
        fig_roc.add_trace(go.Scatter(x=fpr, y=tpr, mode='lines', name=f'{selected_model} (AUC = {roc_auc:.2f})'))
        fig_roc.add_trace(go.Scatter(x=[0, 1], y=[0, 1], mode='lines', name='Palpite Aleat√≥rio (AUC = 0.5)', line=dict(dash='dash', color='gray')))
        fig_roc.update_layout(
            title="Curva ROC",
            xaxis_title="Taxa de Falso Positivo",
            yaxis_title="Taxa de Verdadeiro Positivo",
            height=450,
            margin=dict(t=50, b=50),
            legend=dict(x=0.6, y=0.1)
        )
        
        # Mescla o texto antigo e o novo
        roc_description_list.extend([
            html.P(["A curva ROC tra√ßa a ", html.B("Taxa de Verdadeiro Positivo"), " contra a ", html.B("Taxa de Falso Positivo"), ". Quanto mais pr√≥xima a curva estiver do canto superior esquerdo, melhor o modelo √© para distinguir entre as duas classes (inadimplentes e n√£o inadimplentes). A √Årea Sob a Curva (AUC) fornece uma √∫nica m√©trica para resumir o desempenho do modelo. O gr√°fico que voc√™ est√° vendo mostra o 'trade-off' para cada modelo entre encontrar inadimplentes reais (Taxa de Verdadeiro Positivo) e sinalizar incorretamente n√£o inadimplentes como de alto risco (Taxa de Falso Positivo). Um bom modelo ter√° uma curva que se inclina para o canto superior esquerdo, ficando bem acima da linha diagonal de 'palpite aleat√≥rio', indicando que √© muito melhor do que um lan√ßamento de moeda para separar os dois grupos."]),
            html.P(["Todos os modelos, incluindo a ", html.B("Regress√£o Log√≠stica"), ", alcan√ßaram uma ", html.B("curva ROC perfeita com um AUC de 1.00"), ", confirmando sua capacidade de distinguir entre clientes que ir√£o e n√£o ir√£o inadimplir."]),
            html.P(["O modelo atualmente selecionado, ", html.B(selected_model), ", tem um ", html.B("AUC"), " de ", html.B(f"{roc_auc:.2f}.")])
        ])

    else:
        fig_roc.update_layout(title=f"Curva ROC n√£o Dispon√≠vel para {selected_model}")
        roc_description_list.append(html.P("A curva ROC n√£o est√° dispon√≠vel para este modelo, pois ele n√£o suporta previs√µes de probabilidade."))

    return fig_cm, report, fig_fi, fig_roc, roc_description_list
    
# Executa o aplicativo
if __name__ == "__main__":
    app.run(debug=True)